# Calculate the mode using the user function
result <- getmode(v)
# create a vector in R
x <- c(12,7,3,4,2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <- mean(x)
print(result.mean)
result.mean <- mean(x,trim = 0.3)
print(result.mean)
# Find the median
median.result <- median(x)
print(median.result)
# Create the Function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr)
library(tidyverse)
# Cargar el dataset
dataset <- read.csv("winequality-white.csv", header = TRUE, sep = ",")
# Cargar el dataset
dataset <- read.csv("/Users/djap/Downloads/wine+quality/winequality-white.csv", header = TRUE, sep = ",")
# Revisar las primeras filas del dataset
head(dataset)
# Revisar la estructura y tipos de datos
str(dataset)
# Revisar el resumen estadístico de las variables
summary(dataset)
# Identificar los valores faltantes
sum(is.na(dataset))  # Cantidad total de NAs
# Ver en qué columnas hay valores faltantes
colSums(is.na(dataset))
# Eliminar las filas que tienen valores faltantes
dataset_clean <- na.omit(dataset)
# Alternativamente, puedes rellenar los valores faltantes (por ejemplo, con la mediana o media)
dataset_clean <- dataset %>%
mutate_if(is.numeric, ~ifelse(is.na(.), median(., na.rm = TRUE), .))
# Eliminar columnas innecesarias
dataset_clean <- dataset_clean %>%
select(-nombre_columna1, -nombre_columna2)  # Reemplaza por los nombres reales
# Identificar outliers en una columna específica usando IQR
Q1 <- quantile(dataset_clean$columna_numerica, 0.25)
Q3 <- quantile(dataset_clean$columna_numerica, 0.75)
IQR <- Q3 - Q1
# Definir límites para identificar outliers
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filtrar outliers
dataset_clean <- dataset_clean %>%
filter(columna_numerica > lower_bound & columna_numerica < upper_bound)
# Convertir una columna a factor
dataset_clean$columna_factor <- as.factor(dataset_clean$columna_factor)
# Convertir una columna a numérico
dataset_clean$columna_numerica <- as.numeric(dataset_clean$columna_numerica)
write.csv(dataset_clean, "/Users/djap/Downloads/wine+quality/winequality-white.csv", row.names = FALSE)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
Load the data
crime_data <- read_csv("/Users/djap/Downloads/Crime_Data_from_2020_to_Present.csv")
str(crime_data)
summary(crime_data)
crime_data$DATE <- as.Date(crime_data$DATE, format = "%m/%d/%Y")
table(crime_data$CrmCdDesc)  # Replace with the correct column for crime description
table(crime_data$AREA)
crime_data %>%
mutate(Month = floor_date(DATE, "month")) %>%
group_by(Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count)) +
geom_line(color = "steelblue") +
labs(title = "Monthly Crime Trend", x = "Month", y = "Number of Crimes") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
crime_data <- read_csv("/Users/djap/Downloads/Crime_Data_from_2020_to_Present.csv")
str(crime_data)
summary(crime_data)
summary(crime_data)
crime_data$DATE <- as.Date(crime_data$DATE, format = "%d/%m/%Y")
crime_data$`Date Rptd` <- as.Date(crime_data$`Date Rptd`, format = "%d/%m/%Y")
table(crime_data$CrmCdDesc)
table(crime_data$Crm_Cd_Desc)
table(crime_data$CrmCdDesc)
# Explore unique values in key columns, e.g., crime types, areas
table(crime_data$Crm Cd Desc)
table(crime_data$`Crm Cd Desc´)
table(crime_data$`AREA NAME´)
table(crime_data$`Crm Cd Desc´)
table(crime_data$`AREA NAME´)
table(crime_data$`AREA NAME`)
table(crime_data$`Crm Cd Desc`)
setwd("~/Downloads/CA1DATAPREP")
library(dbplyr)
library(ggplot2)
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(readr)
crime_data <- read_csv("/Users/djap/Downloads/CA1DATAPREP/CA1DATAPREP/Crime_Data_from_2020_to_Present.csv")
glimpse(crime_data)
crime_data <- crime_data %>%
mutate(
DATE = as.Date(`Date Rptd`, format = "%m/%d/%Y"),  # Convert date column
Year = year(`Date Rptd`),                          # Extract year
Month = month(`Date Rptd`, label = TRUE),          # Extract month as a factor with labels
Weekday = wday(`Date Rptd`, label = TRUE),         # Extract day of week as a factor with labels
Hour = as.numeric(format(`Date Rptd`, "%H"))       # Extract hour if timestamp is present
)
crime_data <- crime_data %>%
mutate(
Date_Rptd = parse_date_time(`Date Rptd`, orders = c("mdy", "ymd", "dmy")),  # Use formats as needed
Year = year(Date_Rptd),
Month = month(Date_Rptd, label = TRUE),
Weekday = wday(Date_Rptd, label = TRUE),
Hour = hour(Date_Rptd)
)
crime_data <- crime_data %>%
mutate(
DATE = as.Date(`Date Rptd`, format = "%m/%d/%Y"),  # Adjust the format as needed
Year = year(DATE),                                 # Extract year
Month = month(DATE, label = TRUE),                 # Extract month as a factor with labels
Weekday = wday(DATE, label = TRUE),                # Extract day of week as a factor with labels
Hour = as.numeric(format(DATE, "%H"))              # Extract hour if timestamp is present
)
crime_data <- crime_data %>%
filter(!is.na(DATE) & !is.na('CrmCdDesc') & !is.na('AREA NAME'))
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(size = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
# Plot 2: Top 10 Crime Types
top_crimes <- crime_data %>%
count('CrmCdDesc', sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder('CrmCdDesc', n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
crime_data <- crime_data %>%
filter(!is.na(DATE) & !is.na(`CrmCdDesc`) & !is.na(`AREA NAME`))
crime_data <- crime_data %>%
filter(!is.na(DATE) & !is.na(`CrmCdDesc´) & !is.na(`AREA NAME´))
table(crime_data$`Crm Cd Desc`)  # Replace with the correct column for crime description
table(crime_data$`AREA NAME`)
# Plot 2: Top 10 Crime Types
top_crimes <- crime_data %>%
count('CrmCdDesc', sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder('CrmCdDesc', n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
# Plot 2: Top 10 Crime Types
top_crimes <- crime_data %>%
count('CrmCdDesc', sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder('CrmCdDesc', n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
crime_data <- crime_data %>%
filter(!is.na(DATE) & !is.na(`CrmCdDesc`) & !is.na(`AREA NAME`))
crime_data <- crime_data %>%
filter(!is.na(DATE) & !is.na(`Crm Cd Desc`) & !is.na(`AREA NAME`))
# Plot 1: Monthly Crime Trend by Year
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
top_crimes <- crime_data %>%
count('CrmCdDesc', sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder('CrmCdDesc', n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
table(crime_data$`Crm Cd Desc`)  # Replace with the correct column for crime description
table(crime_data$`AREA NAME`)
top_crimes <- crime_data %>%
count(`Crm Cd Desc`, sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder(`Crm Cd Desc`, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
# Plot 3: Crime Distribution by Area and Hour
# Create a subset for analysis to show crime occurrence throughout the day across areas
crime_data %>%
filter(!is.na(Hour)) %>%
count(AREA, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = AREA)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data %>%
filter(!is.na(Hour)) %>%
count(AREA, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = AREA)) +
geom_col(position = "dodge") +
scale_x_continuous(breaks = seq(0, 23, by = 1)) +  # Display each hour from 0 to 23
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
scale_x_continuous(breaks = seq(0, 23, by = 1)) +  # Display each hour from 0 to 23
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data <- crime_data %>%
mutate(
DATE = as.Date(`Date Rptd`, format = "%m/%d/%Y%H"),  # Adjust the format as needed
Year = year(DATE),                                 # Extract year
Month = month(DATE, label = TRUE),                 # Extract month as a factor with labels
Weekday = wday(DATE, label = TRUE),                # Extract day of week as a factor with labels
Hour = as.numeric(format(DATE, "%H"))              # Extract hour if timestamp is present
)
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
crime_data <- crime_data %>%
mutate(
# Adjust the column name below if it's different in your dataset
DATE = mdy_hms(`Date Rptd`),  # Parse date and time in "MM/DD/YYYY HH:MM:SS" format
Year = year(DATE),             # Extract year
Month = month(DATE, label = TRUE), # Extract month as a factor with labels
Weekday = wday(DATE, label = TRUE), # Extract day of week as a factor with labels
Hour = hour(DATE)              # Extract hour in 24-hour format
)
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
top_crimes <- crime_data %>%
count(`Crm Cd Desc`, sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder(`Crm Cd Desc`, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
# Plot 1: Monthly Crime Trend by Year
crime_data %>%
group_by(year, month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = month, y = Crime_Count, color = factor(year), group = year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
table(crime_data$`Crm Cd Desc`)  # Replace with the correct column for crime description
table(crime_data$`AREA NAME`)
crime_data %>%
group_by(Year, Month) %>%
summarise(Crime_Count = n()) %>%
ggplot(aes(x = Month, y = Crime_Count, color = factor(Year), group = Year)) +
geom_line(linewidth = 1) +
labs(title = "Monthly Crime Trend by Year", x = "Month", y = "Crime Count") +
scale_color_manual(values = rainbow(n_distinct(crime_data$Year))) +
theme_minimal() +
theme(legend.title = element_blank())
top_crimes <- crime_data %>%
count(`Crm Cd Desc`, sort = TRUE) %>%
top_n(10)
ggplot(top_crimes, aes(x = reorder(`Crm Cd Desc`, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +
labs(title = "Top 10 Most Common Crime Types", x = "Crime Type", y = "Count") +
theme_minimal()
crime_data %>%
filter(!is.na(Hour)) %>%
count(`AREA NAME`, Hour) %>%
ggplot(aes(x = Hour, y = n, fill = `AREA NAME`)) +
geom_col(position = "dodge") +
labs(title = "Crime Distribution by Hour and Area", x = "Hour of the Day (24-hour format)", y = "Crime Count") +
theme_minimal() +
theme(legend.position = "right")
# Plot 4: Weekly Crime Pattern (if Day of Week data is significant)
crime_data %>%
count(Weekday) %>%
ggplot(aes(x = Weekday, y = n)) +
geom_col(fill = "coral") +
labs(title = "Weekly Crime Pattern", x = "Day of the Week", y = "Crime Count") +
theme_minimal()
